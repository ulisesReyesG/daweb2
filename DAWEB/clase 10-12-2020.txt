  public function agregar(){
        $this->view->agregar();
    }

//////////////////////////////////////////////

 public function agregar(){
        $str = file_get_contents(
            STATIC_DIR . "html/artesanias/clasificacion_agregar.html"); 
        $html = Template($str)->render();
        print Template('Agregar clasificacion')->show($html);
    } 

/////////////////////////////////////////////////////////////////////////

<div class="mx-auto m-3 p-3">
    <div class="card">
        <div class="card-header bg-success">
            <h1>Agregar clasificación</h1>
        </div>
       <div class="card-body shadow rounded" >
            <form action="/artesanias/clasificacion/guardar" 
                method="POST">
                <label for="descripcion">Clasificacion:</label>
                <input type="text" name="descripcion" id="descripcion">
                <br>
                <label for="padre">Depende de:</label>
                <input type="text" name="padre" id="padre">
                <br>
                <input type="submit" value="Guardar">
            </form>
        </div>
    </div>
</div>
///////////////////////////////////////////////////////////////

<div class="mx-auto m-3 p-3">
    <div class="card" style="width: 500px;">
        <div class="centrado card-header bg-success " >
            <h5>Agregar clasificación</h5>
        </div>
<div class="card-body shadow rounded" >
            <form action="/artesanias/clasificacion/guardar" 
                method="POST">
                <div class="row">
  <div class="col-sm-4">
                        <label for="descripcion">Clasificación: </label>
                    </div>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" 
                        name="descripcion" id="descripcion"
                        required maxlength="50" >
                    </div>
</div>
                <div class="row">
                    <div class="col-sm-4">
                        <label for="padre">Depende de:</label>
                    </div>
<div class="col-sm-8">
                        <select name="padre" id="padre">
                            <option value="0">Ninguno</option>
                            <!--LISTADO_CLASIFICACION-->
                            <option value="{id}">{descripcion}</option>
                            <!--LISTADO_CLASIFICACION-->
                        </select>
                    </div>
 </div>

                <div style="text-align: center;">
                    <input type="submit" class="btn btn-primary" value="Guardar">
                </div>
   </form>
        </div>
    </div>
</div>

//////////////////////modelo//////////////
<?php
class Clasificacion extends DAO {

    public function __construct() {
        $this->keyfield = "id";
        $this->id = 0;
        $this->descripcion = "";
        $this->padre = 0;
    } 
}
?>
////////////////////databse////////////////////////
public static function connect($driver = DB_DRIVER, 
            $connectionInfo = CONNECTION_INFO)
    {
        if ($driver==Driver::MYSQL){
            $handler = new MySql ($connectionInfo);
        }
else {
            $handler = new Postgres ($connectionInfo);
        }

        self::$handlerDB = $handler;
    } //--- fin método connect
 public static function query($sql){
        return (self::$handlerDB->querySelect($sql));
    }
    public static function queryAction($sql, $values, $keyfield){
        return(self::$handlerDB->queryAction($sql,
            $values, $keyfield));
    }
} //--- fin clase DataBase
?>
/////////////////mysql///////////////////////////
<?php
require_once ("IDB.php");
class MySql implements IDB
{
    private $conn ;
    private $host ;
    private $port ;
    private $db   ;
    private $user ;
    private $pwd  ;
    public function __construct($connectionInfo = []) {
        
        $this->host = $connectionInfo['host'];
        $this->port = $connectionInfo['port'];
        $this->db   = $connectionInfo['db'];
        $this->user = $connectionInfo['user'];
        $this->pwd  = $connectionInfo['pwd'];
    } //--- fin constructor
    public function connect()
    {
        $this->conn = new mysqli($this->host, 
            $this->user, $this->pwd, $this->db, $this->port);
        mysqli_set_charset($this->conn,'utf8mb4');
    }
  public function close() 
    {
        if ($this->conn) {
            $this->conn->close();
        }
    }
public function querySelect($sql = "") 
    {
        $this->connect();
        $resultado = $this->conn->query($sql);
        $filas = [];
        while ($fila = $resultado->fetch_assoc()) {
            $filas[] = $fila;
        }
 $resultado->free();
        $this->close();
        return ($filas);

    }//--- fin querySelect
private function _getType($values = [] ) 
    {
        $type="";
        foreach ($values as $v)
        {
 switch (gettype($v)) {
                case "integer": $type .= "i"; break;
                case "string":  $type .= "s"; break;
                case "double":  $type .= "d"; break;
                default:  $type .="s";
            }
        }
        return ($type);
    } //--- end getType
private function _getParameters( $values = [] ) 
    {
        $types = $this->_gettype($values);
        $parameters = [];
        $parameters[] = &$types; 
        $n= count($values);
        for ($i=0; $i < $n; $i++) {
            $parameters[] = &$values[$i];
        }
        return ($parameters);
    }
public function queryAction($sql, $values, $keyfield) 
    {
        $this->connect();
        $stmt = $this->conn->prepare($sql);
        $parameters = $this->_getParameters($values);
 call_user_func_array(array($stmt , 'bind_param'), $parameters);
        $stmt->execute();
        $resp = $stmt->affected_rows>0;
        if (strpos(ltrim(strtoupper($sql)), "INSERT INTO ")==0) {
            $resp = $this->conn->insert_id;
        }
 $stmt->close();
        $this->close();
        return ($resp);
    } //--- fin queryAction
} //--- fin clase MySql
?>

//////////ver error/////////////
print_r($parameters); echo $stmt; print_r($values); exit;

//////////////////DAO//////////////////////////////

<?php
importar ('core/db/IPersistence');

abstract class DAO implements IPersistence {
    private $driver   = DB_DRIVER;
    private $connInfo = CONNECTION_INFO;

    public function setDriver($driver= DB_DRIVER){
        $this->driver   = $driver;
    }
    public function setConnectionInfo($connectionInfo = CONNECTION_INFO) {
        $this->connInfo = $connectionInfo;
    }
public function analizeObject(){
        $fields = [];
        $values = [];
        $ignoreProperties = ["keyfield", "driver", "connInfo"];
foreach ($this as $k=>$v){
           if ( ( gettype($v) != "object") && 
                (!in_array($k, $ignoreProperties) ) ) {
                $fields[]= $k;
                $values[]= $v;
           }
       }//--- fin foreach
 $keyfield       = "" . $this->keyfield;
        $table          = "" . strtolower(get_class($this));
        return ([$table,$keyfield,$fields,$values]);
    }//--- fin analizeObject
 public function save(){
        list($table,$keyfield,$fields,$values) = $this->analizeObject();
        $id       = $values[array_search($keyfield, $fields)];

 if ($id==0) {
            $sql = "INSERT INTO $table (";
            $sql = $sql . implode(',', $fields) . ") " .
                    " VALUES (" . str_repeat("?,", count($values)); 
            //--- quitar la ultima coma y cerrar el parentesis del value
            $sql = substr($sql, 0, strlen($sql)-1) .  " )";
        } else {
$sql = "UPDATE $table  SET ";
            $i   = 0; 
            $aux = "";
            foreach ($fields as $field){
                $aux = $aux . $field . "=?,";
                $i++;
            }
//--- quitar la ultima coma
            $aux = substr($aux, 0, strlen($aux)-1);
            $sql = $sql . $aux . " WHERE $keyfield=?";
            $fields[]= $id; //--- para el caso de where 
        }
DataBase::connect($this->driver,$this->connInfo);
        $resultado = DataBase::queryAction($sql, $values, $keyfield);
        return ($resultado);
    }
public function getAll() 
    {
        list($table) = $this->analizeObject();

        $sql="SELECT * FROM " . $table;
DataBase::connect($this->driver, $this->connInfo);
        $resultado = DataBase::query($sql);
        $clase     = ucwords($table);
        $listado   = [];
foreach ($resultado as $row) {
            $obj = new $clase;
            foreach($row as $k=>$v){
                $obj->$k = $v;
            }
            $listado[] = $obj;
        }
 return ($listado);
    }//--- fin getAll

    public function getById($id = 0) 
    {
        list($table, $keyfield) = $this->analizeObject();
        $sql="SELECT * FROM " . $table .
            " WHERE $keyfield = $id";
        DataBase::connect($this->driver, $this->connInfo);
        $resultado = DataBase::query($sql);
        $clase     = ucwords($table);
        $obj       = new $clase;
        foreach ($resultado as $row) {
            foreach($row as $k=>$v){
                $obj->$k= $v;
            }
        }
        return ($obj);
    }//--- fin getById

    public function getByField($field, $value){

    }
    public function delete($id=0){
        list($table, $keyfield, $fields, $values) = $this->analizeObject();
        $sql="DELETE FROM " . $table . " WHERE $keyfield=$id";
        DataBase::connect($this->driver,$this->connInfo);
        return (DataBase::queryAction($sql, $values, $keyfield));
    } //--- fin delete
    public function deleteAll(){
        list($table, $keyfield, $fields, $values) = $this->analizeObject();
        $sql="DELETE FROM " . $table;
        DataBase::connect($this->driver,$this->connInfo);
        return (DataBase::queryAction($sql, $values, $keyfield));

    } //--- fin deleteAll
public function query($sql){
        DataBase::connect($this->driver,$this->connInfo);
        $resultado = DataBase::query($sql);
        return ($resultado);
    }
} //--- fin clase DAO
?>

/////reemplazo variable sql metodo listar///////////////

$sql = "SELECT C.id, C.descripcion, 
            IFNULL(P.descripcion, 'Ninguno') as padre 
                FROM clasificacion C LEFT JOIN clasificacion P 
                ON C.padre=P.id";
